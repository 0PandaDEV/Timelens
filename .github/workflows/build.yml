name: "Nightly Builds"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4
      - name: Get version
        id: get_version
        run: echo "VERSION=$(node -p "require('./src-tauri/tauri.conf.json').version")" >> $GITHUB_OUTPUT

  build-macos:
    needs: prepare
    strategy:
      matrix:
        include:
          - args: "--target aarch64-apple-darwin"
            arch: "silicon"
          - args: "--target x86_64-apple-darwin"
            arch: "intel"
    runs-on: macos-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - name: Redact Sensitive Information
        run: |
          function redact_output {
            sed -e "s/${{ secrets.REDACT_PATTERN }}/REDACTED/g"
          }
          exec > >(redact_output) 2>&1
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin,x86_64-apple-darwin
      - uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"
      - uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - run: npm install -g pnpm && pnpm install
      - name: Import Apple Developer Certificate
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain
      - name: Verify Certificate
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Apple Development")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported."
      - name: Build Tauri App
        run: |
          pnpm tauri build ${{ matrix.args }} --verbose
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}
        timeout-minutes: 30
      - name: Debug Build Output
        if: failure()
        run: |
          echo "Listing build directory contents:"
          ls -R src-tauri/target
          echo "Checking codesign output:"
          codesign -dv --verbose=4 src-tauri/target/${{ matrix.args == '--target aarch64-apple-darwin' && 'aarch64-apple-darwin' || 'x86_64-apple-darwin' }}/release/bundle/macos/Timelens-Client.app
      - name: Rename and Publish macOS Artifacts
        run: |
          for file in src-tauri/target/${{ matrix.args == '--target aarch64-apple-darwin' && 'aarch64-apple-darwin' || 'x86_64-apple-darwin' }}/release/bundle/dmg/*.dmg; do
            mv "$file" "src-tauri/target/${{ matrix.args == '--target aarch64-apple-darwin' && 'aarch64-apple-darwin' || 'x86_64-apple-darwin' }}/release/bundle/dmg/Timelens-Client-${{ needs.prepare.outputs.version }}_${{ matrix.arch }}.dmg"
          done
          for file in src-tauri/target/${{ matrix.args == '--target aarch64-apple-darwin' && 'aarch64-apple-darwin' || 'x86_64-apple-darwin' }}/release/bundle/macos/*.app.tar.gz; do
            mv "$file" "src-tauri/target/${{ matrix.args == '--target aarch64-apple-darwin' && 'aarch64-apple-darwin' || 'x86_64-apple-darwin' }}/release/bundle/macos/Timelens-Client-${{ needs.prepare.outputs.version }}_${{ matrix.arch }}.app.tar.gz"
          done
          for file in src-tauri/target/${{ matrix.args == '--target aarch64-apple-darwin' && 'aarch64-apple-darwin' || 'x86_64-apple-darwin' }}/release/bundle/macos/*.app.tar.gz.sig; do
            mv "$file" "src-tauri/target/${{ matrix.args == '--target aarch64-apple-darwin' && 'aarch64-apple-darwin' || 'x86_64-apple-darwin' }}/release/bundle/macos/Timelens-Client-${{ needs.prepare.outputs.version }}_${{ matrix.arch }}.app.tar.gz.sig"
          done
      - uses: actions/upload-artifact@v4
        with:
          name: build-macos-dmg-${{ matrix.arch }}
          path: src-tauri/target/${{ matrix.args == '--target aarch64-apple-darwin' && 'aarch64-apple-darwin' || 'x86_64-apple-darwin' }}/release/bundle/dmg/*.dmg
      - uses: actions/upload-artifact@v4
        with:
          name: updater-files-macos-${{ matrix.arch }}
          path: |
            src-tauri/target/${{ matrix.args == '--target aarch64-apple-darwin' && 'aarch64-apple-darwin' || 'x86_64-apple-darwin' }}/release/bundle/macos/*.app.tar.gz
            src-tauri/target/${{ matrix.args == '--target aarch64-apple-darwin' && 'aarch64-apple-darwin' || 'x86_64-apple-darwin' }}/release/bundle/macos/*.app.tar.gz.sig

  build-windows:
    needs: prepare
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: dtolnay/rust-toolchain@stable
      - uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"
      - uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - run: npm install -g pnpm && pnpm install
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Rename Windows Artifacts
        run: |
          for file in src-tauri/target/release/bundle/msi/*.msi; do
            mv "$file" "src-tauri/target/release/bundle/msi/Timelens-Client-${{ needs.prepare.outputs.version }}.msi"
          done
      - uses: actions/upload-artifact@v4
        with:
          name: build-windows-msi
          path: src-tauri/target/release/bundle/msi/*.msi

  build-ubuntu:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: dtolnay/rust-toolchain@stable
      - uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"
      - uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - name: install dependencies
        run: |
          sudo apt update
          sudo apt install libwebkit2gtk-4.1-dev build-essential curl wget file libssl-dev libayatana-appindicator3-dev librsvg2-dev libasound2-dev
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig" >> $GITHUB_ENV
      - run: npm install -g pnpm && pnpm install
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Rename Ubuntu Artifacts
        run: |
          for file in src-tauri/target/release/bundle/deb/*.deb; do
            mv "$file" "src-tauri/target/release/bundle/deb/Timelens-Client-${{ needs.prepare.outputs.version }}.deb"
          done
          for file in src-tauri/target/release/bundle/appimage/*.AppImage; do
            mv "$file" "src-tauri/target/release/bundle/appimage/Timelens-Client-${{ needs.prepare.outputs.version }}.AppImage"
          done
          for file in src-tauri/target/release/bundle/rpm/*.rpm; do
            mv "$file" "src-tauri/target/release/bundle/rpm/Timelens-Client-${{ needs.prepare.outputs.version }}.rpm"
          done
      - uses: actions/upload-artifact@v4
        with:
          name: build-ubuntu-deb
          path: src-tauri/target/release/bundle/deb/*.deb
      - uses: actions/upload-artifact@v4
        with:
          name: build-ubuntu-appimage
          path: src-tauri/target/release/bundle/appimage/*.AppImage
      - uses: actions/upload-artifact@v4
        with:
          name: build-ubuntu-rpm
          path: src-tauri/target/release/bundle/rpm/*.rpm